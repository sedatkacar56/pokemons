### A Pokemon Types Table Plot In Python
### Seaborn Approach:
# References:
# https://stackoverflow.com/questions/33158075/custom-annotation-seaborn-heatmap
# https://stackoverflow.com/questions/40734343/artificial-tick-labels-for-seaborn-heatmaps
# Pokemon Type Table Reference: https://img.pokemondb.net/images/typechart.png


import seaborn as sns
import numpy as np
from matplotlib import pyplot as plt


# Dictionary to map Pokémon types to abbreviations
type_abbreviations = {
    "Normal": "N",
    "Fire": "F",
    "Water": "W",
    "Electric": "E",
    "Grass": "G",
    "Ice": "I",
    "Fighting": "FG",
    "Poison": "P",
    "Ground": "GR",
    "Flying": "FL",
    "Psychic": "PS",
    "Bug": "B",
    "Rock": "R",
    "Ghost": "GH",
    "Dragon": "DR",
    "Dark": "D",
    "Steel": "S",
    "Fairy": "FA"
}

pokemon_types = ["N", "F", "W", "E", "G", "I",
                 "FG", "P", "GR", "FL", "PS",
                 "B", "R", "GH", "DR", "D", "S", "FA"]

# A 2 Dimenstional Numpy Array Of Damage Multipliers For Attacking Pokemon:
    
damage_array = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1/2, 0, 1, 1, 1/2, 1],
                    [1, 1/2, 1/2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1/2, 1, 1/2, 1, 2, 1],
                    [1, 2, 1/2, 1, 1/2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1/2, 1, 1, 1],
                    [1, 1, 2, 1/2, 1/2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1/2, 1, 1, 1],
                    [1, 1/2, 2, 1, 1/2, 1, 1, 1/2, 2, 1/2, 1, 1/2, 2, 1, 1/2, 1, 1/2, 1],
                    [1, 1/2, 1/2, 1, 2, 1/2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1/2, 1],
                    [2, 1, 1, 1, 1, 2, 1, 1/2, 1, 1/2, 1/2, 1/2, 2, 0, 1, 2, 2, 1/2],
                    [1, 1, 1, 1, 2, 1, 1, 1/2, 1/2, 1, 1, 1, 1/2, 1/2, 1, 1, 0, 2],
                    [1, 2, 1, 2, 1/2, 1, 1, 2, 1, 0, 1, 1/2, 2, 1, 1, 1, 2, 1],
                    [1, 1, 1, 1/2, 2, 1, 2, 1, 1, 1, 1, 2, 1/2, 1, 1, 1, 1/2, 1],
                    [1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1/2, 1, 1, 1, 1, 0, 1/2, 1],
                    [1, 1/2, 1, 1, 2, 1, 1/2, 1/2, 1, 1/2, 2, 1, 1, 1/2, 1, 2, 1/2, 1/2],
                    [1, 2, 1, 1, 1, 2, 1/2, 1, 1/2, 2, 1, 2, 1, 1, 1, 1, 1/2, 1],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1/2, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1/2, 0],
                    [1, 1, 1, 1, 1, 1, 1/2, 1, 1, 1, 2, 1, 1, 2, 1, 1/2, 1, 1/2],
                    [1, 1/2, 1/2, 1/2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1/2, 2],
                    [1, 1/2, 1, 1, 1, 1, 2, 1/2, 1, 1, 1, 1, 1, 1, 2, 2, 1/2, 1]])


def calculate_modified_values(attacking_types, defending_types, chart):
    modified_values = np.zeros((len(attacking_types), len(defending_types)), dtype=float)
    for i, at in enumerate(attacking_types):
        for j, df in enumerate(defending_types):
            attacking_modifier = chart[pokemon_types.index(at)][pokemon_types.index(df)]
            modified_values[i][j] = attacking_modifier
    return modified_values

# Get user input for attacking and defending Pokémon types and HP values
input_data = input("Enter attacking and defending Pokémon types and HP values (comma-separated, e.g., G,GR,100,G,E,50): ").strip().split(' ')
attacking_types = [input_data[0], input_data[1]]  # First and second elements
attacking_HP = float(input_data[2])  # The third element, converted to float
defending_types = [input_data[3], input_data[4]]  # Fourth and fifth elements
defending_HP = float(input_data[5])  # The sixth element, converted to float


# Calculate attack values
attack_values = calculate_modified_values(attacking_types, defending_types, damage_array)

# Calculate the sum of all attack values
total_attack_value = np.sum(attack_values)

# Create a list of all possible combinations for attack
attack_combinations = [(at, df) for at in attacking_types for df in defending_types]

# Calculate the total values for all attack combinations
total_attack_values = np.zeros(len(attack_combinations))
for i, (at, df) in enumerate(attack_combinations):
    total_attack_values[i] = np.sum(calculate_modified_values([at], [df], damage_array))

# Create a list of all possible combinations for defense
defense_combinations = [(df, at) for df in defending_types for at in attacking_types]

# Calculate the total values for all defense combinations
total_defense_values = np.zeros(len(defense_combinations))
for i, (df, at) in enumerate(defense_combinations):
    total_defense_values[i] = np.sum(calculate_modified_values([df], [at], damage_array))

# Display the attack results
print("Attack Values:")
for i, (at, df) in enumerate(attack_combinations):
    print(f"{at} vs. {df}: {total_attack_values[i]:.2f}")

# Display the defense results
print("\nDefense Values:")
for i, (df, at) in enumerate(defense_combinations):
    print(f"{df} vs. {at}: {total_defense_values[i]:.2f}")
    
    # Display the total attack value
total_attack_value = np.sum(total_attack_values)
total_defense_value = np.sum(total_defense_values)


# Display the total attack value
print(f"\nTotal Attack Value of {attacking_types}: {total_attack_value:.2f}")
print(f"Total Defense Value {defending_types}: {total_defense_value:.2f}")

first = attacking_HP / total_defense_value
second = defending_HP / total_attack_value

print({total_defense_value})

if first > second:
    
    remaining_HP_of_attacking = attacking_HP - total_defense_value*second
    print(f"\nRemaining_HP_of_attacking Pokemon {attacking_types}: {remaining_HP_of_attacking:.2f}")  
    attacking_HP = remaining_HP_of_attacking

else:
    remaining_HP_of_defending = defending_HP - total_attack_value*first
    print(f"\nRemaining_HP_of_defensive Pokemon {defending_types}: {remaining_HP_of_defending:.2f}")
    attacking_HP = remaining_HP_of_defending
    attacking_types = defending_types 

# Loop to continue until the user decides to exit
while True:
    # Get user input for defending Pokémon type and HP values
    input_data = input("Enter defending Pokémon types and HP values (comma-separated, e.g., G,GR,100): ").strip().split(' ')
    
    if len(input_data) != 3:
        print("Invalid input format. Please enter types and HP values as specified.")
        continue  # Skip the rest of the loop and ask for input again
    
    defending_types = [input_data[0], input_data[1]]
    defending_HP = float(input_data[2])
    
    # Calculate attack values
    attack_values = calculate_modified_values(attacking_types, defending_types, damage_array)
    
    # Calculate the sum of all attack values
    total_attack_value = np.sum(attack_values)
    
    # Create a list of all possible combinations for attack
    attack_combinations = [(at, df) for at in attacking_types for df in defending_types]
    
    # Calculate the total values for all attack combinations
    total_attack_values = np.zeros(len(attack_combinations))
    for i, (at, df) in enumerate(attack_combinations):
        total_attack_values[i] = np.sum(calculate_modified_values([at], [df], damage_array))
    
    # Create a list of all possible combinations for defense
    defense_combinations = [(df, at) for df in defending_types for at in attacking_types]
    
    # Calculate the total values for all defense combinations
    total_defense_values = np.zeros(len(defense_combinations))
    for i, (df, at) in enumerate(defense_combinations):
        total_defense_values[i] = np.sum(calculate_modified_values([df], [at], damage_array))
    
    # Display the attack results
    print("Attack Values:")
    for i, (at, df) in enumerate(attack_combinations):
        print(f"{at} vs. {df}: {total_attack_values[i]:.2f}")
    
    # Display the defense results
    print("\nDefense Values:")
    for i, (df, at) in enumerate(defense_combinations):
        print(f"{df} vs. {at}: {total_defense_values[i]:.2f}")
    # Display the total attack value
    total_attack_value = np.sum(total_attack_values)
    total_defense_value = np.sum(total_defense_values)


    # Display the total attack value
    print(f"\nTotal Attack Value of {attacking_types}: {total_attack_value:.2f}")
    print(f"Total Defense Value {defending_types}: {total_defense_value:.2f}")

  
    # Calculate remaining HP based on the battle outcome
    first = attacking_HP / total_defense_value
    second = defending_HP / total_attack_value
    
    if first > second:
        remaining_HP_of_attacking = attacking_HP - total_defense_value * second
        print({attacking_HP}), print({total_defense_value}), print({second}), print({defending_HP})
        print(f"\nRemaining HP of attacking Pokemon {attacking_types}: {remaining_HP_of_attacking:.2f}")
        attacking_HP = remaining_HP_of_attacking
        
    else:
        remaining_HP_of_defending = defending_HP - total_attack_value * first
        print({defending_HP}), print({total_attack_value}), print({first}),  print({attacking_HP}), print({total_defense_value})
        print(f"\nRemaining HP of defending Pokemon {defending_types}: {remaining_HP_of_defending:.2f}")
        attacking_HP = remaining_HP_of_defending
        attacking_types = defending_types
        

    print("Press the spacebar to continue or any other key to exit...")
    user_choice = input().strip()
    if user_choice != 'X':
        break  # Exit the loop if any key other than space is pressed
